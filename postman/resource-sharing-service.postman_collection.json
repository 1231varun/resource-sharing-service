{
  "info": {
    "name": "Resource Sharing Service API",
    "description": "A scalable resource sharing system with multi-level access control",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "01234567-0123-4123-8123-123456789abc",
      "type": "string"
    },
    {
      "key": "resourceId",
      "value": "11234567-1123-4123-8123-123456789abc",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "item": [
        {
          "name": "Get Health Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "health"
              ]
            },
            "description": "Returns the current health status of the API server"
          },
          "response": []
        }
      ],
      "description": "Health check endpoints"
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users?limit=50&offset=0",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "50",
                  "description": "Maximum number of users to return (1-100)"
                },
                {
                  "key": "offset",
                  "value": "0",
                  "description": "Number of users to skip"
                }
              ]
            },
            "description": "Returns a paginated list of all users in the system"
          },
          "response": []
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "{{userId}}"
              ]
            },
            "description": "Returns a single user by their unique identifier"
          },
          "response": []
        },
        {
          "name": "Get User Accessible Resources",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/{{userId}}/resources?limit=50&offset=0",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "{{userId}}",
                "resources"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "50",
                  "description": "Maximum number of resources to return (1-100)"
                },
                {
                  "key": "offset",
                  "value": "0",
                  "description": "Number of resources to skip"
                }
              ]
            },
            "description": "Returns all resources that a user has access to through direct sharing, group membership, or global access"
          },
          "response": []
        },
        {
          "name": "Check User Access to Resource",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/{{userId}}/access-check/{{resourceId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user",
                "{{userId}}",
                "access-check",
                "{{resourceId}}"
              ]
            },
            "description": "Fast access check to determine if a user has access to a specific resource"
          },
          "response": []
        }
      ],
      "description": "User management and access operations"
    },
    {
      "name": "Resources",
      "item": [
        {
          "name": "Get Resource Access List",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/resource/{{resourceId}}/access-list",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "resource",
                "{{resourceId}}",
                "access-list"
              ]
            },
            "description": "Returns all users who have access to a specific resource through direct sharing, group membership, or global access"
          },
          "response": []
        }
      ],
      "description": "Resource management and access control"
    },
    {
      "name": "Reporting",
      "item": [
        {
          "name": "Get Resource Statistics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/resources/stats?limit=50&offset=0&minUsers=0",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "resources",
                "stats"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "50",
                  "description": "Maximum number of resources to return (1-100)"
                },
                {
                  "key": "offset",
                  "value": "0",
                  "description": "Number of resources to skip"
                },
                {
                  "key": "minUsers",
                  "value": "0",
                  "description": "Filter resources with at least N users"
                }
              ]
            },
            "description": "Returns statistics about resources with user access counts"
          },
          "response": []
        },
        {
          "name": "Get Users with Resource Count",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/with-resource-count?limit=50&offset=0&minResources=0&sortBy=name&sortOrder=asc",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "with-resource-count"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "50",
                  "description": "Maximum number of users to return (1-100)"
                },
                {
                  "key": "offset",
                  "value": "0",
                  "description": "Number of users to skip"
                },
                {
                  "key": "minResources",
                  "value": "0",
                  "description": "Filter users with at least N resources"
                },
                {
                  "key": "sortBy",
                  "value": "name",
                  "description": "Sort field: name, email, resourceCount, createdAt"
                },
                {
                  "key": "sortOrder",
                  "value": "asc",
                  "description": "Sort order: asc or desc"
                }
              ]
            },
            "description": "Returns all users with statistics about their resource access counts"
          },
          "response": []
        }
      ],
      "description": "Analytics and reporting endpoints"
    },
    {
      "name": "API Documentation",
      "item": [
        {
          "name": "Swagger UI",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "text/html"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/docs",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "docs"
              ]
            },
            "description": "Interactive Swagger UI documentation"
          },
          "response": []
        },
        {
          "name": "OpenAPI JSON Spec",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/docs/json",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "docs",
                "json"
              ]
            },
            "description": "Raw OpenAPI 3.0 specification in JSON format"
          },
          "response": []
        }
      ],
      "description": "API documentation endpoints"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set default test user and resource IDs from seeded data",
          "if (!pm.collectionVariables.get(\"userId\") || pm.collectionVariables.get(\"userId\") === \"{{$randomUUID}}\") {",
          "    pm.collectionVariables.set(\"userId\", \"01234567-0123-4123-8123-123456789abc\");",
          "}",
          "",
          "if (!pm.collectionVariables.get(\"resourceId\") || pm.collectionVariables.get(\"resourceId\") === \"{{$randomUUID}}\") {",
          "    pm.collectionVariables.set(\"resourceId\", \"11234567-1123-4123-8123-123456789abc\");",
          "}",
          "",
          "// Log current variables for debugging",
          "console.log(\"Base URL:\", pm.collectionVariables.get(\"baseUrl\"));",
          "console.log(\"User ID:\", pm.collectionVariables.get(\"userId\"));",
          "console.log(\"Resource ID:\", pm.collectionVariables.get(\"resourceId\"));"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Common test scripts for all requests",
          "pm.test(\"Status code is not 500\", function () {",
          "    pm.expect(pm.response.code).to.not.equal(500);",
          "});",
          "",
          "pm.test(\"Response time is reasonable\", function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "// Check content type for JSON responses",
          "if (pm.response.headers.get(\"Content-Type\") && pm.response.headers.get(\"Content-Type\").includes(\"application/json\")) {",
          "    pm.test(\"Content-Type header is JSON\", function () {",
          "        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
          "    });",
          "",
          "    pm.test(\"Response is valid JSON\", function () {",
          "        pm.response.to.have.jsonBody();",
          "    });",
          "    ",
          "    const responseJson = pm.response.json();",
          "    ",
          "    if (responseJson.success !== undefined) {",
          "        pm.test(\"Response has success field\", function () {",
          "            pm.expect(responseJson).to.have.property(\"success\");",
          "        });",
          "        ",
          "        if (pm.response.code >= 200 && pm.response.code < 300) {",
          "            pm.test(\"Success responses have success=true\", function () {",
          "                pm.expect(responseJson.success).to.be.true;",
          "            });",
          "        }",
          "    }",
          "}"
        ]
      }
    }
  ]
}